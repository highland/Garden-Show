#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Dec 19, 2022 04:38:19 PM GMT  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import entryform_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.map('TCheckbutton',background =
           [('selected', _bgcolor), ('active', _ana2color)], indicatorcolor =
           [('selected', _fgcolor), ('!active', _bgcolor)])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+505+135")
        top.minsize(120, 1)
        top.maxsize(3844, 1061)
        top.resizable(1,  1)
        top.title("Badenoch Gardening Club")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.class_var = tk.StringVar()
        self.countVar = tk.StringVar()
        self.description_var = tk.StringVar()
        self.totalsVar = tk.StringVar()
        self.tch51 = tk.IntVar()
        self.entriesVar = tk.StringVar()

        _style_code()
        self.Title = ttk.Label(self.top)
        self.Title.place(relx=0.0, rely=0.0, height=29, width=605)
        self.Title.configure(background="#d9d9d9")
        self.Title.configure(foreground="#000000")
        self.Title.configure(font="-family {Segoe UI} -size 12")
        self.Title.configure(relief="raised")
        self.Title.configure(anchor='w')
        self.Title.configure(justify='center')
        self.Title.configure(text='''Entry Form''')
        self.Title.configure(compound='left')
        self.NameEntry = ttk.Entry(self.top)
        self.NameEntry.place(relx=0.133, rely=0.133, relheight=0.047
                , relwidth=0.66)
        self.NameEntry.configure(takefocus="")
        self.NameEntry.configure(cursor="ibeam")
        self.NameLabel = ttk.Label(self.top)
        self.NameLabel.place(relx=0.033, rely=0.133, height=19, width=65)
        self.NameLabel.configure(background="#d9d9d9")
        self.NameLabel.configure(foreground="#000000")
        self.NameLabel.configure(font="TkDefaultFont")
        self.NameLabel.configure(relief="flat")
        self.NameLabel.configure(anchor='w')
        self.NameLabel.configure(justify='left')
        self.NameLabel.configure(text='''Name:''')
        self.NameLabel.configure(compound='left')
        self.MemberCheck = ttk.Checkbutton(self.top)
        self.MemberCheck.place(relx=0.833, rely=0.111, relwidth=0.133
                , relheight=0.0, height=41)
        self.MemberCheck.configure(variable=self.tch51)
        self.MemberCheck.configure(takefocus="")
        self.MemberCheck.configure(text='''member?''')
        self.MemberCheck.configure(compound='left')
        self.ClassEntry = tk.Entry(self.top)
        self.ClassEntry.place(relx=0.033, rely=0.267, height=20, relwidth=0.073)
        self.ClassEntry.configure(background="white")
        self.ClassEntry.configure(disabledforeground="#a3a3a3")
        self.ClassEntry.configure(font="TkFixedFont")
        self.ClassEntry.configure(foreground="#000000")
        self.ClassEntry.configure(highlightbackground="#d9d9d9")
        self.ClassEntry.configure(highlightcolor="black")
        self.ClassEntry.configure(insertbackground="black")
        self.ClassEntry.configure(selectbackground="#c4c4c4")
        self.ClassEntry.configure(selectforeground="black")
        self.ClassEntry.configure(textvariable=self.class_var)
        self.entryCount = ttk.Combobox(self.top)
        self.entryCount.place(relx=0.867, rely=0.267, relheight=0.047
                , relwidth=0.072)
        self.value_list = ['1','2',]
        self.entryCount.configure(values=self.value_list)
        self.entryCount.configure(textvariable=self.countVar)
        self.entryCount.configure(takefocus="")
        self.description = ttk.Label(self.top)
        self.description.place(relx=0.15, rely=0.267, height=19, width=385)
        self.description.configure(background="#d9d9d9")
        self.description.configure(foreground="#000000")
        self.description.configure(font="TkDefaultFont")
        self.description.configure(relief="sunken")
        self.description.configure(anchor='w')
        self.description.configure(justify='left')
        self.description.configure(textvariable=self.description_var)
        self.description_var.set('''''')
        self.description.configure(compound='left')
        self.ClassLabel = tk.Label(self.top)
        self.ClassLabel.place(relx=0.033, rely=0.222, height=21, width=44)
        self.ClassLabel.configure(activebackground="#f9f9f9")
        self.ClassLabel.configure(anchor='w')
        self.ClassLabel.configure(background="#d9d9d9")
        self.ClassLabel.configure(compound='left')
        self.ClassLabel.configure(disabledforeground="#a3a3a3")
        self.ClassLabel.configure(font="-family {Segoe UI} -size 10")
        self.ClassLabel.configure(foreground="#000000")
        self.ClassLabel.configure(highlightbackground="#d9d9d9")
        self.ClassLabel.configure(highlightcolor="black")
        self.ClassLabel.configure(text='''Class''')
        self.DescriptionLabel = tk.Label(self.top)
        self.DescriptionLabel.place(relx=0.15, rely=0.222, height=21, width=94)
        self.DescriptionLabel.configure(activebackground="#f9f9f9")
        self.DescriptionLabel.configure(anchor='w')
        self.DescriptionLabel.configure(background="#d9d9d9")
        self.DescriptionLabel.configure(compound='left')
        self.DescriptionLabel.configure(disabledforeground="#a3a3a3")
        self.DescriptionLabel.configure(font="-family {Segoe UI} -size 10")
        self.DescriptionLabel.configure(foreground="#000000")
        self.DescriptionLabel.configure(highlightbackground="#d9d9d9")
        self.DescriptionLabel.configure(highlightcolor="black")
        self.DescriptionLabel.configure(text='''Description''')
        self.CountLabel = tk.Label(self.top)
        self.CountLabel.place(relx=0.867, rely=0.222, height=21, width=44)
        self.CountLabel.configure(activebackground="#f9f9f9")
        self.CountLabel.configure(anchor='w')
        self.CountLabel.configure(background="#d9d9d9")
        self.CountLabel.configure(compound='left')
        self.CountLabel.configure(disabledforeground="#a3a3a3")
        self.CountLabel.configure(font="-family {Segoe UI} -size 10")
        self.CountLabel.configure(foreground="#000000")
        self.CountLabel.configure(highlightbackground="#d9d9d9")
        self.CountLabel.configure(highlightcolor="black")
        self.CountLabel.configure(text='''Count''')
        self.Scrolledlistbox = ScrolledListBox(self.top)
        self.Scrolledlistbox.place(relx=0.033, rely=0.356, relheight=0.478
                , relwidth=0.752)
        self.Scrolledlistbox.configure(background="white")
        self.Scrolledlistbox.configure(cursor="xterm")
        self.Scrolledlistbox.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox.configure(font="TkFixedFont")
        self.Scrolledlistbox.configure(foreground="black")
        self.Scrolledlistbox.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox.configure(selectforeground="black")
        self.Scrolledlistbox.configure(selectmode='single')
        self.Scrolledlistbox.configure(listvariable=self.entriesVar)
        self.EditButton = ttk.Button(self.top)
        self.EditButton.place(relx=0.833, rely=0.356, height=25, width=66)
        self.EditButton.configure(takefocus="")
        self.EditButton.configure(text='''Edit''')
        self.EditButton.configure(compound='left')
        self.EditButton.configure(state='disabled')
        self.DeleteButton = ttk.Button(self.top)
        self.DeleteButton.place(relx=0.833, rely=0.444, height=25, width=66)
        self.DeleteButton.configure(takefocus="")
        self.DeleteButton.configure(text='''Delete''')
        self.DeleteButton.configure(compound='left')
        self.DeleteButton.configure(state='disabled')
        self.CancelButton = ttk.Button(self.top)
        self.CancelButton.place(relx=0.7, rely=0.889, height=25, width=76)
        self.CancelButton.configure(takefocus="")
        self.CancelButton.configure(text='''Cancel''')
        self.CancelButton.configure(compound='left')
        self.SaveButton = ttk.Button(self.top)
        self.SaveButton.place(relx=0.85, rely=0.889, height=25, width=76)
        self.SaveButton.configure(takefocus="")
        self.SaveButton.configure(text='''Save''')
        self.SaveButton.configure(compound='left')
        self.TotalsLabel = ttk.Label(self.top)
        self.TotalsLabel.place(relx=0.033, rely=0.889, height=29, width=75)
        self.TotalsLabel.configure(background="#d9d9d9")
        self.TotalsLabel.configure(foreground="#000000")
        self.TotalsLabel.configure(font="TkDefaultFont")
        self.TotalsLabel.configure(relief="flat")
        self.TotalsLabel.configure(anchor='w')
        self.TotalsLabel.configure(justify='left')
        self.TotalsLabel.configure(text='''Total Entries:''')
        self.TotalsLabel.configure(compound='left')
        self.Totals = ttk.Label(self.top)
        self.Totals.place(relx=0.167, rely=0.889, height=29, width=35)
        self.Totals.configure(background="#d9d9d9")
        self.Totals.configure(foreground="#000000")
        self.Totals.configure(font="TkDefaultFont")
        self.Totals.configure(relief="sunken")
        self.Totals.configure(anchor='w')
        self.Totals.configure(justify='left')
        self.Totals.configure(textvariable=self.totalsVar)
        self.totalsVar.set('''''')
        self.Totals.configure(compound='left')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    entryform_support.main()

if __name__ == '__main__':
    entryform_support.main()




